name: CI/CD

on:
  push:
    branches:
      - master

env:
  REGISTRY: andremart/flaskapp

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:

      - name: Git checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8.10'

      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          ignore: "E501"
      

  build_and_push:
    runs-on: ubuntu-latest
    name: Build and push docker image
    needs: lint
    outputs:
      commit_hash: ${{ steps.commit_hash.outputs.commit_hash }}
    steps:

      - name: Git checkout
        uses: actions/checkout@v3

      - id: commit_hash
        run: echo "::set-output name=commit_hash::${GITHUB_SHA::7}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}:${{ steps.commit_hash.outputs.commit_hash }}

  deploy:
    strategy:
      matrix:
          server: [18.193.254.173, 3.74.47.14]
    runs-on: ubuntu-latest
    name: Deploy
    needs: build_and_push
    steps:

      - name: Deploy app to EC2
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ matrix.server }}
          username: ${{ secrets.HOSTSUSERNAME }}
          key: ${{ secrets.KEY }}
          envs: ${{ secrets.DOCKER_USER }}, ${{ secrets.DOCKERHUB_TOKEN }}
          port: 22
          script: |
            # login docker
            sudo docker login -u $DOCKER_USER -p $DOCKERHUB_TOKEN
            
            sudo docker-compose down
            
            # Create docker-compose
            echo \
            "version: '2.1'

            services:
              app:
                container_name: flask_app
                image: ${{ env.REGISTRY }}:${{ needs.build_and_push.outputs.commit_hash }}
                ports:
                  - 5000:5000
                restart: always
                depends_on:
                    db:
                        condition: service_healthy

              db:
                container_name: mysql_db
                image: mysql:8.0.29
                ports:
                  - 3306:3306
                restart: always
                environment:
                  MYSQL_ROOT_PASSWORD: devops
                  MYSQL_USER: devops
                  MYSQL_PASSWORD: devops
                  MYSQL_DATABASE: student
                volumes:
                  - db:/var/lib/mysql
                healthcheck:
                  test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
                  timeout: 20s
                  retries: 10

            volumes:
              db:" > docker-compose.yml

            sudo docker-compose up -d
  
  curl:
    strategy:
      matrix:
          server: [18.193.254.173, 3.74.47.14]
          port: [5000]
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check the deployed service URL
        uses: jtalk/url-health-check-action@v2
        with:
          # Check the following URLs one by one sequentially
          url: ${{ matrix.server }}:${{ matrix.port }}/api